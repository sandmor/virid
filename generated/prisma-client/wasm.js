
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProviderScalarFieldEnum = {
  id: 'id',
  apiKey: 'apiKey'
};

exports.Prisma.TierScalarFieldEnum = {
  id: 'id',
  modelIds: 'modelIds',
  bucketCapacity: 'bucketCapacity',
  bucketRefillAmount: 'bucketRefillAmount',
  bucketRefillIntervalSeconds: 'bucketRefillIntervalSeconds'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email'
};

exports.Prisma.UserRateLimitScalarFieldEnum = {
  userId: 'userId',
  tokens: 'tokens',
  lastRefill: 'lastRefill'
};

exports.Prisma.AgentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  description: 'description',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  userId: 'userId',
  visibility: 'visibility',
  lastContext: 'lastContext',
  settings: 'settings',
  parentChatId: 'parentChatId',
  forkedFromMessageId: 'forkedFromMessageId',
  forkDepth: 'forkDepth',
  agentId: 'agentId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  role: 'role',
  parts: 'parts',
  attachments: 'attachments',
  createdAt: 'createdAt',
  model: 'model'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  content: 'content',
  kind: 'kind',
  userId: 'userId',
  metadata: 'metadata'
};

exports.Prisma.SuggestionScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  documentCreatedAt: 'documentCreatedAt',
  originalText: 'originalText',
  suggestedText: 'suggestedText',
  description: 'description',
  isResolved: 'isResolved',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.StreamScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  createdAt: 'createdAt'
};

exports.Prisma.ArchiveEntryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  slug: 'slug',
  entity: 'entity',
  tags: 'tags',
  body: 'body',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatPinnedArchiveEntryScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  archiveEntryId: 'archiveEntryId',
  userId: 'userId',
  pinnedAt: 'pinnedAt'
};

exports.Prisma.ArchiveLinkScalarFieldEnum = {
  id: 'id',
  sourceId: 'sourceId',
  targetId: 'targetId',
  type: 'type',
  bidirectional: 'bidirectional',
  createdAt: 'createdAt'
};

exports.Prisma.ModelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  provider: 'provider',
  supportsTools: 'supportsTools',
  supportedFormats: 'supportedFormats',
  pricing: 'pricing',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  value: 'value'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Provider: 'Provider',
  Tier: 'Tier',
  User: 'User',
  UserRateLimit: 'UserRateLimit',
  Agent: 'Agent',
  Chat: 'Chat',
  Message: 'Message',
  Document: 'Document',
  Suggestion: 'Suggestion',
  Stream: 'Stream',
  ArchiveEntry: 'ArchiveEntry',
  ChatPinnedArchiveEntry: 'ChatPinnedArchiveEntry',
  ArchiveLink: 'ArchiveLink',
  Model: 'Model',
  Setting: 'Setting'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/sandmor/Projects/virid/generated/prisma-client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-1.1.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/sandmor/Projects/virid/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma-client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  // Prisma CLI loads .env by default. Next.js will load .env.local at runtime.\n  // Ensure DATABASE_URL is available when running Prisma commands.\n  url      = env(\"DATABASE_URL\")\n}\n\n// Stores per-provider API keys overriding environment variables.\n// Only include providers we integrate with directly (e.g., openai, google, openrouter, etc.)\n// Id is the canonical slug for the provider (\"openai\", \"google\", \"openrouter\").\nmodel Provider {\n  id     String @id @db.VarChar(64)\n  apiKey String @db.Text\n\n  @@map(\"Provider\")\n}\n\nmodel Tier {\n  id                          String   @id @db.VarChar(32)\n  modelIds                    String[]\n  // Token bucket configuration (per user for this tier)\n  bucketCapacity              Int // Maximum tokens that can accumulate\n  bucketRefillAmount          Int // Tokens added each interval\n  bucketRefillIntervalSeconds Int // Interval length in seconds\n\n  @@map(\"Tier\")\n}\n\nmodel User {\n  id    String @id @db.VarChar(191) // Accept Clerk style ids (e.g. user_...) or UUIDs\n  email String @db.VarChar(128)\n\n  chats                Chat[]\n  documents            Document[]\n  suggestions          Suggestion[]\n  archiveEntries       ArchiveEntry[]\n  pinnedArchiveEntries ChatPinnedArchiveEntry[]\n  rateLimit            UserRateLimit?\n  agents               Agent[]\n\n  @@map(\"User\")\n}\n\n// Per-user token bucket runtime state for rate limiting\nmodel UserRateLimit {\n  userId     String   @id @db.VarChar(191)\n  tokens     Int\n  lastRefill DateTime\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"UserRateLimit\")\n}\n\nmodel Agent {\n  id          String   @id @default(uuid()) @db.Uuid\n  userId      String   @db.VarChar(191)\n  name        String   @db.VarChar(128)\n  description String?  @db.Text\n  // Aggregated future-proof agent settings bucket (tools, etc.)\n  // Shape is managed in application code; left unvalidated at the DB level for forward compatibility.\n  settings    Json?\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n  chats Chat[]\n\n  @@map(\"Agent\")\n}\n\nmodel Chat {\n  id          String   @id @default(uuid()) @db.Uuid\n  createdAt   DateTime\n  title       String   @db.Text\n  userId      String   @db.VarChar(191)\n  visibility  String   @default(\"private\")\n  lastContext Json?\n  // Aggregated future-proof chat settings bucket (pinnedEntries, tool allow list, etc.)\n  // Shape is managed in application code; left unvalidated at the DB level for forward compatibility.\n  settings    Json?\n\n  // Fork / lineage metadata\n  parentChatId        String? @db.Uuid\n  forkedFromMessageId String? @db.Uuid\n  forkDepth           Int     @default(0)\n\n  agentId String? @db.Uuid\n\n  user                 User                     @relation(fields: [userId], references: [id])\n  agent                Agent?                   @relation(fields: [agentId], references: [id])\n  messages             Message[]\n  streams              Stream[]\n  pinnedArchiveEntries ChatPinnedArchiveEntry[]\n\n  @@index([parentChatId])\n  @@map(\"Chat\")\n}\n\nmodel Message {\n  id          String   @id @default(uuid()) @db.Uuid\n  chatId      String   @db.Uuid\n  role        String\n  parts       Json\n  attachments Json\n  createdAt   DateTime\n  model       String?\n\n  chat Chat @relation(fields: [chatId], references: [id])\n\n  @@index([chatId])\n  @@map(\"Message\")\n}\n\nmodel Document {\n  id        String   @db.Uuid\n  createdAt DateTime\n  title     String   @db.Text\n  content   String?\n  kind      String   @default(\"text\")\n  userId    String   @db.VarChar(191)\n  metadata  Json?\n\n  user        User         @relation(fields: [userId], references: [id])\n  suggestions Suggestion[]\n\n  @@id([id, createdAt])\n  @@map(\"Document\")\n}\n\nmodel Suggestion {\n  id                String   @id @default(uuid()) @db.Uuid\n  documentId        String   @db.Uuid\n  documentCreatedAt DateTime\n  originalText      String   @db.Text\n  suggestedText     String   @db.Text\n  description       String?\n  isResolved        Boolean  @default(false)\n  userId            String   @db.VarChar(191)\n  createdAt         DateTime\n\n  user     User     @relation(fields: [userId], references: [id])\n  document Document @relation(fields: [documentId, documentCreatedAt], references: [id, createdAt])\n\n  @@map(\"Suggestion\")\n}\n\nmodel Stream {\n  id        String   @id @default(uuid()) @db.Uuid\n  chatId    String   @db.Uuid\n  createdAt DateTime\n\n  chat Chat @relation(fields: [chatId], references: [id])\n\n  @@map(\"Stream\")\n}\n\n// Archive memory system: per-user knowledge entries and their relationships.\nmodel ArchiveEntry {\n  id        String   @id @default(uuid()) @db.Uuid\n  userId    String   @db.VarChar(191)\n  slug      String   @db.VarChar(128)\n  entity    String   @db.Text\n  tags      String[]\n  body      String   @db.Text\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user User @relation(fields: [userId], references: [id])\n\n  outgoingLinks ArchiveLink[]            @relation(\"sourceLinks\")\n  incomingLinks ArchiveLink[]            @relation(\"targetLinks\")\n  pinnedInChats ChatPinnedArchiveEntry[]\n\n  @@unique([userId, slug])\n  @@index([userId, slug])\n  @@map(\"ArchiveEntry\")\n}\n\n// Join table mapping pinned archive entries to chats (user scoped for ownership enforcement)\nmodel ChatPinnedArchiveEntry {\n  id             String   @id @default(uuid()) @db.Uuid\n  chatId         String   @db.Uuid\n  archiveEntryId String   @db.Uuid\n  userId         String   @db.VarChar(191)\n  pinnedAt       DateTime @default(now())\n\n  chat         Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)\n  archiveEntry ArchiveEntry @relation(fields: [archiveEntryId], references: [id], onDelete: Cascade)\n  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([chatId, archiveEntryId])\n  @@index([chatId])\n  @@index([archiveEntryId])\n  @@index([userId])\n  @@map(\"ChatPinnedArchiveEntry\")\n}\n\nmodel ArchiveLink {\n  id            String   @id @default(uuid()) @db.Uuid\n  sourceId      String   @db.Uuid\n  targetId      String   @db.Uuid\n  type          String   @db.VarChar(64)\n  bidirectional Boolean  @default(false)\n  createdAt     DateTime @default(now())\n\n  source ArchiveEntry @relation(\"sourceLinks\", fields: [sourceId], references: [id], onDelete: Cascade)\n  target ArchiveEntry @relation(\"targetLinks\", fields: [targetId], references: [id], onDelete: Cascade)\n\n  @@index([sourceId])\n  @@index([targetId])\n  @@index([type])\n  @@map(\"ArchiveLink\")\n}\n\n// Model capabilities metadata\nmodel Model {\n  id               String   @id @db.VarChar(256) // composite id (provider:model)\n  name             String   @db.VarChar(256) // Human-readable name\n  provider         String   @db.VarChar(64) // Provider slug (openai, google, openrouter)\n  supportsTools    Boolean  @default(true) // Whether the model supports tool calling\n  supportedFormats String[] // Supported input formats: text, image, file, audio, video, etc.\n  pricing          Json? // Pricing information: { prompt: number (per million), completion: number (per million), image: number (per image) }\n  createdAt        DateTime @default(now())\n  updatedAt        DateTime @updatedAt\n\n  @@index([provider])\n  @@map(\"Model\")\n}\n\n// Global application settings\nmodel Setting {\n  id    String @id @db.VarChar(128) // Setting key\n  value String @db.Text // Setting value as string (JSON serialized for complex types)\n\n  @@map(\"Setting\")\n}\n",
  "inlineSchemaHash": "ac6973817ad14485c78d1282eb66451e0fd2a5fc94e1b2c433390496760b885c",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Provider\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"apiKey\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"Provider\"},\"Tier\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"modelIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bucketCapacity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"bucketRefillAmount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"bucketRefillIntervalSeconds\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":\"Tier\"},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chats\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToUser\"},{\"name\":\"documents\",\"kind\":\"object\",\"type\":\"Document\",\"relationName\":\"DocumentToUser\"},{\"name\":\"suggestions\",\"kind\":\"object\",\"type\":\"Suggestion\",\"relationName\":\"SuggestionToUser\"},{\"name\":\"archiveEntries\",\"kind\":\"object\",\"type\":\"ArchiveEntry\",\"relationName\":\"ArchiveEntryToUser\"},{\"name\":\"pinnedArchiveEntries\",\"kind\":\"object\",\"type\":\"ChatPinnedArchiveEntry\",\"relationName\":\"ChatPinnedArchiveEntryToUser\"},{\"name\":\"rateLimit\",\"kind\":\"object\",\"type\":\"UserRateLimit\",\"relationName\":\"UserToUserRateLimit\"},{\"name\":\"agents\",\"kind\":\"object\",\"type\":\"Agent\",\"relationName\":\"AgentToUser\"}],\"dbName\":\"User\"},\"UserRateLimit\":{\"fields\":[{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokens\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastRefill\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserRateLimit\"}],\"dbName\":\"UserRateLimit\"},\"Agent\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"settings\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AgentToUser\"},{\"name\":\"chats\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"AgentToChat\"}],\"dbName\":\"Agent\"},\"Chat\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"visibility\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastContext\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"settings\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"parentChatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"forkedFromMessageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"forkDepth\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"agentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ChatToUser\"},{\"name\":\"agent\",\"kind\":\"object\",\"type\":\"Agent\",\"relationName\":\"AgentToChat\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"ChatToMessage\"},{\"name\":\"streams\",\"kind\":\"object\",\"type\":\"Stream\",\"relationName\":\"ChatToStream\"},{\"name\":\"pinnedArchiveEntries\",\"kind\":\"object\",\"type\":\"ChatPinnedArchiveEntry\",\"relationName\":\"ChatToChatPinnedArchiveEntry\"}],\"dbName\":\"Chat\"},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parts\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"attachments\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"model\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chat\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToMessage\"}],\"dbName\":\"Message\"},\"Document\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kind\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DocumentToUser\"},{\"name\":\"suggestions\",\"kind\":\"object\",\"type\":\"Suggestion\",\"relationName\":\"DocumentToSuggestion\"}],\"dbName\":\"Document\"},\"Suggestion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documentCreatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"originalText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"suggestedText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isResolved\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SuggestionToUser\"},{\"name\":\"document\",\"kind\":\"object\",\"type\":\"Document\",\"relationName\":\"DocumentToSuggestion\"}],\"dbName\":\"Suggestion\"},\"Stream\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"chat\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToStream\"}],\"dbName\":\"Stream\"},\"ArchiveEntry\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"entity\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"body\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ArchiveEntryToUser\"},{\"name\":\"outgoingLinks\",\"kind\":\"object\",\"type\":\"ArchiveLink\",\"relationName\":\"sourceLinks\"},{\"name\":\"incomingLinks\",\"kind\":\"object\",\"type\":\"ArchiveLink\",\"relationName\":\"targetLinks\"},{\"name\":\"pinnedInChats\",\"kind\":\"object\",\"type\":\"ChatPinnedArchiveEntry\",\"relationName\":\"ArchiveEntryToChatPinnedArchiveEntry\"}],\"dbName\":\"ArchiveEntry\"},\"ChatPinnedArchiveEntry\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"archiveEntryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pinnedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"chat\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToChatPinnedArchiveEntry\"},{\"name\":\"archiveEntry\",\"kind\":\"object\",\"type\":\"ArchiveEntry\",\"relationName\":\"ArchiveEntryToChatPinnedArchiveEntry\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ChatPinnedArchiveEntryToUser\"}],\"dbName\":\"ChatPinnedArchiveEntry\"},\"ArchiveLink\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sourceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"targetId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bidirectional\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"source\",\"kind\":\"object\",\"type\":\"ArchiveEntry\",\"relationName\":\"sourceLinks\"},{\"name\":\"target\",\"kind\":\"object\",\"type\":\"ArchiveEntry\",\"relationName\":\"targetLinks\"}],\"dbName\":\"ArchiveLink\"},\"Model\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"supportsTools\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"supportedFormats\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pricing\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"Model\"},\"Setting\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"Setting\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

