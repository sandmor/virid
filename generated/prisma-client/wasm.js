
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  userId: 'userId',
  visibility: 'visibility',
  lastContext: 'lastContext',
  parentChatId: 'parentChatId',
  forkedFromMessageId: 'forkedFromMessageId',
  forkDepth: 'forkDepth'
};

exports.Prisma.Message_v2ScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  role: 'role',
  parts: 'parts',
  attachments: 'attachments',
  createdAt: 'createdAt',
  baseId: 'baseId',
  previousVersionId: 'previousVersionId',
  supersededById: 'supersededById',
  regenerationGroupId: 'regenerationGroupId',
  parentBaseId: 'parentBaseId'
};

exports.Prisma.Vote_v2ScalarFieldEnum = {
  chatId: 'chatId',
  messageId: 'messageId',
  isUpvoted: 'isUpvoted'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  content: 'content',
  kind: 'kind',
  userId: 'userId'
};

exports.Prisma.SuggestionScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  documentCreatedAt: 'documentCreatedAt',
  originalText: 'originalText',
  suggestedText: 'suggestedText',
  description: 'description',
  isResolved: 'isResolved',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.StreamScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Chat: 'Chat',
  Message_v2: 'Message_v2',
  Vote_v2: 'Vote_v2',
  Document: 'Document',
  Suggestion: 'Suggestion',
  Stream: 'Stream'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/sandmor/Projects/virid/generated/prisma-client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-1.1.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/sandmor/Projects/virid/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma-client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  // Prisma CLI loads .env by default. Next.js will load .env.local at runtime.\n  // Ensure DATABASE_URL is available when running Prisma commands.\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    String @id @db.VarChar(191) // Accept Clerk style ids (e.g. user_...) or UUIDs\n  email String @db.VarChar(128)\n\n  chats       Chat[]\n  documents   Document[]\n  suggestions Suggestion[]\n\n  @@map(\"User\")\n}\n\nmodel Chat {\n  id          String   @id @default(uuid()) @db.Uuid\n  createdAt   DateTime\n  title       String   @db.Text\n  userId      String   @db.VarChar(191)\n  visibility  String   @default(\"private\")\n  lastContext Json?\n\n  // Fork / lineage metadata\n  parentChatId        String? @db.Uuid\n  forkedFromMessageId String? @db.Uuid\n  forkDepth           Int     @default(0)\n\n  user     User         @relation(fields: [userId], references: [id])\n  messages Message_v2[]\n  votes    Vote_v2[]\n  streams  Stream[]\n\n  @@index([parentChatId])\n  @@map(\"Chat\")\n}\n\nmodel Message_v2 {\n  id          String   @id @default(uuid()) @db.Uuid\n  chatId      String   @db.Uuid\n  role        String\n  parts       Json\n  attachments Json\n  createdAt   DateTime\n\n  // Versioning / regeneration lineage\n  baseId              String? @db.Uuid // Stable logical slot id across versions (first version id if null previously)\n  previousVersionId   String? @db.Uuid // Points to prior version in same chat\n  supersededById      String? @db.Uuid // Filled when a newer version replaces this version\n  regenerationGroupId String? @db.Uuid // Group multiple assistant variants from a single user turn\n  parentBaseId        String? @db.Uuid // BaseId of previous logical message (sequence helper)\n\n  chat  Chat      @relation(fields: [chatId], references: [id])\n  votes Vote_v2[]\n\n  @@index([chatId, baseId])\n  @@index([previousVersionId])\n  @@index([supersededById])\n  @@index([regenerationGroupId])\n  @@map(\"Message_v2\")\n}\n\nmodel Vote_v2 {\n  chatId    String  @db.Uuid\n  messageId String  @db.Uuid\n  isUpvoted Boolean\n\n  message Message_v2 @relation(fields: [messageId], references: [id])\n  chat    Chat       @relation(fields: [chatId], references: [id])\n\n  @@id([chatId, messageId])\n  @@map(\"Vote_v2\")\n}\n\nmodel Document {\n  id        String   @db.Uuid\n  createdAt DateTime\n  title     String   @db.Text\n  content   String?\n  kind      String   @default(\"text\")\n  userId    String   @db.VarChar(191)\n\n  user        User         @relation(fields: [userId], references: [id])\n  suggestions Suggestion[]\n\n  @@id([id, createdAt])\n  @@map(\"Document\")\n}\n\nmodel Suggestion {\n  id                String   @id @default(uuid()) @db.Uuid\n  documentId        String   @db.Uuid\n  documentCreatedAt DateTime\n  originalText      String   @db.Text\n  suggestedText     String   @db.Text\n  description       String?\n  isResolved        Boolean  @default(false)\n  userId            String   @db.VarChar(191)\n  createdAt         DateTime\n\n  user     User     @relation(fields: [userId], references: [id])\n  document Document @relation(fields: [documentId, documentCreatedAt], references: [id, createdAt])\n\n  @@map(\"Suggestion\")\n}\n\nmodel Stream {\n  id        String   @id @default(uuid()) @db.Uuid\n  chatId    String   @db.Uuid\n  createdAt DateTime\n\n  chat Chat @relation(fields: [chatId], references: [id])\n\n  @@map(\"Stream\")\n}\n",
  "inlineSchemaHash": "4bde0dc1f09f08a0d5be591840f32362155254663b6b62cb2e9d06ed898fb830",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chats\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToUser\"},{\"name\":\"documents\",\"kind\":\"object\",\"type\":\"Document\",\"relationName\":\"DocumentToUser\"},{\"name\":\"suggestions\",\"kind\":\"object\",\"type\":\"Suggestion\",\"relationName\":\"SuggestionToUser\"}],\"dbName\":\"User\"},\"Chat\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"visibility\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastContext\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"parentChatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"forkedFromMessageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"forkDepth\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ChatToUser\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message_v2\",\"relationName\":\"ChatToMessage_v2\"},{\"name\":\"votes\",\"kind\":\"object\",\"type\":\"Vote_v2\",\"relationName\":\"ChatToVote_v2\"},{\"name\":\"streams\",\"kind\":\"object\",\"type\":\"Stream\",\"relationName\":\"ChatToStream\"}],\"dbName\":\"Chat\"},\"Message_v2\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parts\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"attachments\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"baseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"previousVersionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"supersededById\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"regenerationGroupId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parentBaseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chat\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToMessage_v2\"},{\"name\":\"votes\",\"kind\":\"object\",\"type\":\"Vote_v2\",\"relationName\":\"Message_v2ToVote_v2\"}],\"dbName\":\"Message_v2\"},\"Vote_v2\":{\"fields\":[{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isUpvoted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"message\",\"kind\":\"object\",\"type\":\"Message_v2\",\"relationName\":\"Message_v2ToVote_v2\"},{\"name\":\"chat\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToVote_v2\"}],\"dbName\":\"Vote_v2\"},\"Document\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kind\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DocumentToUser\"},{\"name\":\"suggestions\",\"kind\":\"object\",\"type\":\"Suggestion\",\"relationName\":\"DocumentToSuggestion\"}],\"dbName\":\"Document\"},\"Suggestion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documentCreatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"originalText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"suggestedText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isResolved\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SuggestionToUser\"},{\"name\":\"document\",\"kind\":\"object\",\"type\":\"Document\",\"relationName\":\"DocumentToSuggestion\"}],\"dbName\":\"Suggestion\"},\"Stream\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"chat\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToStream\"}],\"dbName\":\"Stream\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

